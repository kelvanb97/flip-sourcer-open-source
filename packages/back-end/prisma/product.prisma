model Product {
    id                       Int                @id @default(autoincrement())
    createdAt                DateTime           @default(now())
    updatedAt                DateTime           @default(now()) @updatedAt
    matchType                String
    matchScore               Float
    matchScoreBreakdown      Json               @default("{}")
    gptTitleMatchScore       Float              @default(0)
    gptTitleMatchIterations  Int                @default(0)
    gptTitleMatchLock        Boolean            @default(false)
    highestRoiByCondition    Float?
    highestProfitByCondition Float?
    retailerInfo             RetailerInfo       @relation(fields: [retailerInfoId], references: [id])
    retailerInfoId           Int                @unique
    amazonInfo               AmazonInfo         @relation(fields: [amazonInfoId], references: [id])
    amazonInfoId             Int
    valueByCondition         ValueByCondition[]
}

// Profit are written from SPAPI service
// ROI is written from SPAPI service
// Lowest offer is written from PDP scraper
// Fees by condition are written from SPAPI service
model ValueByCondition {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    condition String
    value     Float
    type      String // Profit, ROI, lowest offer, or Fees
    product   Product? @relation(fields: [productId], references: [id])
    productId Int?
}

model AmazonInfo {
    id                Int       @id @default(autoincrement())
    products          Product[]
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    asin              String    @unique
    productName       String
    productLink       String
    productImageLink  String
    hasBuyBox         Boolean
    buyBoxPrice       Float?
    category          String
    offers            Json
    amazonOnListing   Boolean
    reviewCount       Int?
    rating            Float?
    dimensions        Json
    weight            Json
    lastKeepaPollTime DateTime?
    lastSPAPIPollTime DateTime?

    //Chart data
    chartHistoricalDatum Json?

    //Keepa data
    salesRankFlat      Int?
    salesRankPercent   Float?
    salesRank30DayAvg  Int?
    salesRank60DayAvg  Int?
    salesRank90DayAvg  Int?
    salesRank180DayAvg Int?

    salesRankDrops30  Int?
    salesRankDrops90  Int?
    salesRankDrops180 Int?

    reviewCount90DayAvg  Int?
    reviewCount180DayAvg Int?

    buyBoxCurrent   Float?
    buyBox90DayAvg  Float?
    buyBox180DayAvg Float?
    buyBoxStock     Int?
    buyBox90DayOos  Float?

    amazon90DayOos Float?

    newCurrent   Float?
    new90DayAvg  Float?
    new180DayAvg Float?
    new90DayOos  Float?

    new3rdPartyFbaCurrent   Float?
    new3rdPartyFba90DayAvg  Float?
    new3rdPartyFba180DayAvg Float?

    new3rdPartyFbmCurrent   Float?
    new3rdPartyFbm90DayAvg  Float?
    new3rdPartyFbm180DayAvg Float?

    used90DayOos Float?

    newOfferCount          Int?
    newOfferCount30DayAvg  Int?
    newOfferCount90DayAvg  Int?
    newOfferCount180DayAvg Int?

    countOfRetrievedLiveOffersFba Int?
    countOfRetrievedLiveOffersFbm Int?
}

// Data from the monthly query
model KeepaNumProductsInCategory {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    numProduct Int
    category   String
}

model RetailerInfo {
    id                     Int                      @id @default(autoincrement())
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    siteName               String
    productName            String
    productUpc             String?
    productCost            Float
    productCostUsed        Float?
    productLink            String                   @unique
    productImageLink       String
    productInStock         Boolean?
    productStock           String?
    retailerHistoricalData RetailerHistoricalData[]

    product   Product?
    productId Int?     @unique
}

model RetailerProductIndex {
    id               Int      @id @default(autoincrement())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    productLink      String   @unique
    productImageLink String
    retailer         String
    pdpInfo          Json     @default("{}")
    locked           Boolean  @default(false)
    lockedBy         String   @default("")
    errorCount       Int      @default(0)
}

model RetailerProductDiscoveryBookmark {
    id                  Int      @id @default(autoincrement())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    baseUrl             String   @unique
    endingUrl           String   @unique
    retailer            String
    successfulPageCount Int      @default(0)
    locked              Boolean  @default(false)
    lockedBy            String   @default("")
    errorCount          Int      @default(0)
    completed           Boolean  @default(false)
}

model RetailerHistoricalData {
    id             Int          @id @default(autoincrement())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    timestamp      String
    value          Float
    type           String
    RetailerInfo   RetailerInfo @relation(fields: [retailerInfoId], references: [id])
    retailerInfoId Int
}
